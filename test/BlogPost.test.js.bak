import mongoose from 'mongoose';
import express from 'express';
import { MongoMemoryServer } from 'mongodb-memory-server';
import BlogPost from '../models/BlogPost'; // Adjust the path as necessary

describe('BlogPost Model Test', () => {
    let mongoServer;

    beforeAll(async () => {
        mongoServer = await MongoMemoryServer.create();
        const mongoUri = mongoServer.getUri();
        await mongoose.connect(mongoUri, { useNewUrlParser: true, useUnifiedTopology: true });
    });

    afterAll(async () => {
        await mongoose.disconnect();
        await mongoServer.stop();
    });

    afterEach(async () => {
        await BlogPost.deleteMany();  // Clear the database after each test
    });

    test('should create & save a blog post successfully', async () => {
        const postData = {
            title: "Test Post",
            body: "This is a test blog post",
            author: "Tester"
        };
        const validPost = new BlogPost(postData);
        const savedPost = await validPost.save();

        // Object Id should be defined when successfully saved to MongoDB.
        expect(savedPost._id).toBeDefined();
        expect(savedPost.title).toBe(postData.title);
        expect(savedPost.body).toBe(postData.body);
        expect(savedPost.author).toBe(postData.author);
    });

    test('should fail to create a blog post without required fields', async () => {
        const invalidPost = new BlogPost({ title: 'Incomplete Post' });
        let err;

        try {
            await invalidPost.save();
        } catch (error) {
            err = error;
        }

        expect(err).toBeInstanceOf(mongoose.Error.ValidationError);
        expect(err.errors.body).toBeDefined();
        expect(err.errors.author).toBeDefined();
    });

    test('should update a blog post successfully', async () => {
        const post = new BlogPost({
            title: "Original Title",
            body: "Original Body",
            author: "Original Author"
        });
        const savedPost = await post.save();
        const updatedData = { title: "Updated Title", body: "Updated Body" };

        const updatedPost = await BlogPost.findByIdAndUpdate(savedPost._id, updatedData, { new: true });

        expect(updatedPost.title).toBe(updatedData.title);
        expect(updatedPost.body).toBe(updatedData.body);
    });

    test('should delete a blog post successfully', async () => {
        const post = new BlogPost({
            title: "Post to Delete",
            body: "This post will be deleted",
            author: "Deleter"
        });
        const savedPost = await post.save();

        const deletedPost = await BlogPost.findByIdAndDelete(savedPost._id);
        const result = await BlogPost.findById(savedPost._id);

        expect(result).toBeNull();
    });
});

